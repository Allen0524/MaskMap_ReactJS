{"version":3,"sources":["StoreList.js","Navbar.js","App.js","index.js"],"names":["StoreList","className","this","props","localStores","map","store","style","marginBottom","properties","name","display","marginTop","mask_adult","mask_child","Component","Navbar","state","cityName","areaName","allData","centerStores","getData","fetch","then","res","json","data","features","catch","error","console","onCityChange","e","setState","target","value","onAreaChange","getCenter","getLatLon","newCenter","geometry","coordinates","updateCenter","filter","address","includes","citySelect","CityCountyData","city","key","CityName","onChange","AreaList","area","AreaName","App","center","L","zoom","tileLayer","attribution","addTo","markers","markerClusterGroup","spiderfyOnMaxZoom","showCoverageOnHover","zoomToBoundsOnClick","iconCreateFunction","cluster","divIcon","html","getChildCount","i","length","lat","lon","adult","child","addLayer","marker","bindPopup","phone","prevState","panTo","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ab028db.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass StoreList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"all-store-list\">\r\n                {this.props.localStores.map(store => \r\n                <div className=\"store-div\">    \r\n                    <h3 style={{marginBottom:\"3px\"}}>{store.properties.name}</h3>\r\n                    <div style={{display:\"flex\",marginTop:\"5px\"}}>\r\n                        <h5 className=\"list-adultChild\">大人: {store.properties.mask_adult}</h5>\r\n                        <h5 className=\"list-adultChild\">小孩: {store.properties.mask_child}</h5>\r\n                    </div>\r\n                </div>    \r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StoreList;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport CityCountyData  from './data/CityCountyData.json';\r\nimport StoreList from './StoreList';\r\n\r\n//使用者選好縣市地區後，從口罩資料去比對找出經緯度，因此需要先把口罩資料抓近來。\r\n\r\nclass Navbar extends Component {\r\n\r\n    state = {\r\n        cityName: '新北市',\r\n        areaName: '淡水區',\r\n        allData: [],\r\n        centerStores: [],//使用者選擇區域的所有店家\r\n    }\r\n\r\n    getData = () => {\r\n        return fetch('https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json?fbclid=IwAR0oowBRjj1goAMqtnugBiXMTMY8OCl14TGmgt3YDJi9w5BXs4VsfZQ9mDI')\r\n          .then((res)=> {return res.json()})\r\n          .then(data=> {return data.features} )\r\n          .catch((error)=>console.error(error))\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getData().then(data => this.setState({allData: data},()=>{this.setState({centerStores: this.getCenter()})}));\r\n    }\r\n\r\n    onCityChange = (e) => {\r\n        this.setState({cityName: e.target.value})\r\n    }\r\n\r\n    onAreaChange = (e) => {\r\n        this.setState({areaName: e.target.value}, () => {\r\n            this.setState({centerStores: this.getCenter()}, ()=>{this.getLatLon()})\r\n        });\r\n    }\r\n\r\n    getLatLon = () => {\r\n        const newCenter = [];\r\n        newCenter[0] = this.state.centerStores[0].geometry.coordinates[1];\r\n        newCenter[1] = this.state.centerStores[0].geometry.coordinates[0];\r\n        this.props.updateCenter(newCenter);\r\n    }\r\n\r\n    //取得附近的所有店家\r\n    getCenter = () => {\r\n        return this.state.allData.filter(store => {\r\n            return store.properties.address.includes(this.state.cityName+this.state.areaName)})\r\n    }\r\n\r\n    render() {\r\n\r\n    const citySelect = CityCountyData.map(city => <option key={city.CityName} value={city.CityName}>{city.CityName}</option>)\r\n    const areaSelect = () => {\r\n        const city = CityCountyData.filter(city => city.CityName == this.state.cityName)\r\n         return city[0].AreaList.map(area => <option key={area.AreaName} value={area.AreaName}>{area.AreaName}</option>)\r\n    }\r\n\r\n        return (\r\n            <div className=\"navbar\">\r\n                <div className=\"citySearch\">\r\n                    <select className=\"select-input\" value={this.state.cityName} onChange={this.onCityChange}>\r\n                        {citySelect}\r\n                    </select>\r\n                    <select className=\"select-input\" value={this.state.areaName} onChange={this.onAreaChange}>\r\n                        {areaSelect()}\r\n                    </select>\r\n                </div>\r\n                <StoreList localStores={this.state.centerStores}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\nimport L from 'leaflet';\nimport './App.css';\nimport Navbar from './Navbar';\nimport 'leaflet.markercluster';\n\n\nclass App extends Component {\n\n  state = {\n    center:[\n      25.171712,\n      121.44587,\n    ],\n  }\n\n  getData = () => {\n    return fetch('https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json?fbclid=IwAR0oowBRjj1goAMqtnugBiXMTMY8OCl14TGmgt3YDJi9w5BXs4VsfZQ9mDI')\n      .then((res)=> {return res.json()})\n      .then(data=> {return data.features})\n      .catch((error)=>console.error(error))\n  }\n\n  componentDidMount(){\n    this.map = L.map(\"mapid\", {\n      center: [this.state.center[0], this.state.center[1]],\n      zoom:16,\n    });\n    const osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n    L.tileLayer(osmUrl, {attribution:'&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'}).addTo(this.map);\n\n    \n\n    const currentMapData = () => this.getData().then(data => {\n      const markers = L.markerClusterGroup({\n        spiderfyOnMaxZoom: true,\n        showCoverageOnHover:true,\n        zoomToBoundsOnClick: true,\n        iconCreateFunction:function(cluster){\n          return L.divIcon({html: `<div class=\"custom-cluster\">${cluster.getChildCount()}</div>`});\n        }}).addTo(this.map);\n      for(let i = 0; i < (data.length); i++){\n        let lat = data[i].geometry.coordinates[1];\n        let lon = data[i].geometry.coordinates[0];\n        let adult = data[i].properties.mask_adult;\n        let child = data[i].properties.mask_child;\n\n        markers.addLayer(L.marker([lat, lon])\n          .bindPopup(\n            `<div>\n              <h3>${data[i].properties.name}</h3>\n              <div>${data[i].properties.address}</div>\n              <div>${data[i].properties.phone}</div>\n              <h5>大人: ${adult}<span class=\"child-span\">小孩: ${child}</span></h5>\n            </div>`\n          ));\n      }\n      this.map.addLayer(markers);\n    });\n\n    currentMapData();\n\n  }\n\n  componentDidUpdate(prevState){\n    if(prevState.center != this.state.center){\n      this.map.panTo(this.state.center)\n    }\n  }\n\n  updateCenter = (newCenter) => {\n    this.setState({center: newCenter})\n  }\n  \n\n  render() {\n    return (\n      <div className=\"container\">\n        <Navbar updateCenter={this.updateCenter} />\n        <div id='mapid'></div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}